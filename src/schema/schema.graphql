
type Query {
     "Lista de estudiantes"
      estudiantes: [Estudiante!]!

     "estudiante por id"
      estudiante(id: ID!): Estudiante!

      "Lista de cursos"
      cursos: [Curso!]!

      
     "Curso por id"
      curso(curso: ID!): Curso!
}

"Operaciones para añadir, editar o eliminar información"
type Mutation {
    "Opción para añadir la información de un nuevo curso"
    cursoNuevo(curso: CursoInput!): Curso!

    "Opción para modificar / actualizar la información de un curso seleccionado"
    modificarCurso(curso: CursoInput!) : Curso!

    "Opción para eliminar / borrar la información de un curso seleccionado mediante el ID"
    eliminarCurso(id: ID!): Curso!
}

input CursoInput {
    id: ID
    title: String!
    description: String!
    clases: Int!
    time: Float!
    logo: String!
    level: Nivel=ALL
    path: String!
    teacher: String!
}

"informacion de estudiantes"
type Estudiante {
     "identificativo Éstudiante"
     id: ID!
     name: String!
     email: String!
     website: String
     courses: [Curso!]!
}

type Curso{
     id: ID!
     title: String!
     description: String!
     clases: Int!
     time: Float!
     logo: String!
     level: Nivel!
     path: String!
     teacher: String!
     students: [Estudiante]
     reviews: [Valoracion!]!
}

enum Nivel { 
     "cambie los valores de español a ingles"
     ALL
     BEGINNER
     MEDIUM
     EXPERT
}

type Valoracion{
     id: ID!
     name: String!
     points: Float!
     comment: String
}